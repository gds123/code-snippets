#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int Bs(vector<int> &a, int target){
    int low = 0;
    int high = a.size() - 1;
    while(low <= high){
        int mid = low + (high - low) / 2;
        if(a[mid] < target) low = mid + 1;
        else high = mid - 1;
    }
    return low;
}

int main(){
    vector<int> data = {1, 2, 4, 5, 5, 6};
    for(int i=0; i<8; i++){
        auto lower = lower_bound(data.begin(), data.end(), i);
        auto mylower = data.begin() + Bs(data, i);
        cout << i << " << ";
        lower != data.end()
            ? cout <<  *lower << " at index" << distance(data.begin(), lower)
            : cout << "Not Found";

        cout << "   " << i << " << ";
        mylower != data.end()
            ? cout <<  *mylower << " at index" << distance(data.begin(), mylower)
            : cout << "Not Found";
        cout << endl;
    }


    return 0;
}
